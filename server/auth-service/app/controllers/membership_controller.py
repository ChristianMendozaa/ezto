from fastapi import APIRouter, HTTPException
from app.models.membership_model import MembershipPlan, MembershipAssignment, MembershipRenewal, MembershipCancellation
from app.services.membership_service import MembershipService
import logging

router = APIRouter()

# Configurar logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

@router.get("/", tags=["Planes de Membres√≠a"])
async def list_membership_plans():
    """Obtiene la lista de todos los planes de membres√≠a disponibles."""
    logger.debug("Recibida petici√≥n GET /membership_plans")  # üöÄ Ver si la petici√≥n llega
    try:
        plans = await MembershipService.get_all_plans()  # ‚úÖ CORRECTO
        logger.debug(f"Planes obtenidos: {plans}")  # üöÄ Ver si Firestore devuelve datos
        return [{"id": plan["id"], **plan} for plan in plans]
    except Exception as e:
        logger.error(f"Error en GET /membership_plans: {str(e)}")  # ‚ùå Si algo falla
        raise HTTPException(status_code=500, detail=str(e))

@router.post(
    "/create",
    summary="Crear un nuevo plan de membres√≠a",
    description="Registra un nuevo plan de membres√≠a en la plataforma.",
    response_description="El plan de membres√≠a ha sido registrado exitosamente.",
    responses={
        200: {"description": "Plan de membres√≠a creado exitosamente"},
        400: {"description": "Error en los datos proporcionados"},
    },
    tags=["Planes de Membres√≠a"]
)
async def create_membership_plan(plan: MembershipPlan):
    """Crea un nuevo plan de membres√≠a en la plataforma."""
    try:
        return await MembershipService.create_plan(plan)
    except Exception as e:
        logger.error(f"Error en POST /membership_plans/create: {str(e)}")
        raise HTTPException(status_code=400, detail=str(e))

@router.put(
    "/update/{plan_id}",
    summary="Actualizar un plan de membres√≠a",
    description="Actualiza los datos de un plan de membres√≠a existente.",
    tags=["Planes de Membres√≠a"]
)
async def update_membership_plan(plan_id: str, plan: MembershipPlan):
    """Actualiza un plan de membres√≠a en la plataforma."""
    try:
        return await MembershipService.update_plan(plan_id, plan)
    except Exception as e:
        logger.error(f"Error en PUT /membership_plans/update/{plan_id}: {str(e)}")
        raise HTTPException(status_code=400, detail=str(e))

@router.delete(
    "/delete/{plan_id}",
    summary="Eliminar un plan de membres√≠a",
    description="Elimina un plan de membres√≠a de la plataforma.",
    tags=["Planes de Membres√≠a"]
)
async def delete_membership_plan(plan_id: str):
    """Elimina un plan de membres√≠a por su ID."""
    try:
        return await MembershipService.delete_plan(plan_id)
    except Exception as e:
        logger.error(f"Error en DELETE /membership_plans/delete/{plan_id}: {str(e)}")
        raise HTTPException(status_code=400, detail=str(e))

@router.post(
    "/assign",
    summary="Asignar membres√≠a a un usuario",
    description="Asigna un plan de membres√≠a a un usuario.",
    tags=["Membres√≠as"]
)
async def assign_membership(assignment: MembershipAssignment):
    """Asigna una membres√≠a a un usuario."""
    try:
        return await MembershipService.assign_membership(assignment)
    except Exception as e:
        logger.error(f"Error en POST /membership_plans/assign: {str(e)}")
        raise HTTPException(status_code=400, detail=str(e))

@router.post(
    "/renew",
    summary="Renovar membres√≠a",
    description="Renueva un plan de membres√≠a para un usuario.",
    tags=["Membres√≠as"]
)
async def renew_membership(renewal: MembershipRenewal):
    """Renueva una membres√≠a autom√°ticamente para un usuario."""
    try:
        return await MembershipService.renew_membership(renewal)
    except Exception as e:
        logger.error(f"Error en POST /membership_plans/renew: {str(e)}")
        raise HTTPException(status_code=400, detail=str(e))

@router.post(
    "/cancel",
    summary="Cancelar membres√≠a",
    description="Cancela un plan de membres√≠a para un usuario.",
    tags=["Membres√≠as"]
)
async def cancel_membership(cancellation: MembershipCancellation):
    """Cancela una membres√≠a de un usuario."""
    try:
        return await MembershipService.cancel_membership(cancellation)
    except Exception as e:
        logger.error(f"Error en POST /membership_plans/cancel: {str(e)}")
        raise HTTPException(status_code=400, detail=str(e))
